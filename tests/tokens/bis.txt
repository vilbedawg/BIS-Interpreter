fn fib(n) 
{
    if (n <= 1) return n;
    return fib(n - 2) + fib(n - 1);
}

fn factorial(n) 
{
    if (n <= 1) return 1;
    return factorial(n - 1) * n;
}

print("Numeron 3 kertoma on: ");
print factorial(3);

print "Kymmenen ensimmäistä fibonaccin lukujonon lukua: ";
for (var i = 0; i < 10; i = i + 1)
{ 
    print(fib(i));
}


print "Hello World!";   // Hello World!
print 1 + 2             // 3
print -5                // -5


10 >= 9                 // true
10 <= 9                 // false

123 == "123";           // false
"cat" != "dog";         // true

!true;                  // false
!false;                 // true
true and false;         // false
true and true;          // true
false or false;         // false
true or false;          // true  





if (condition) 
{
  print "yes";
} 
else 
{
  print "no";
}

var a = 1;
while (a < 10) 
{
  print a;
  a = a + 1;
}

for (var a = 1; a < 10; a = a + 1) 
{
  print a;
}






fn returnFunction() {
  var outside = "outside";

  fn inner() {
    print outside;
  }

  return inner;
}

var function = returnFunction();
function();







var string = "Hello World!";
var pi = 3.14;
var nil_value;

print string;    // Tulostaa "Hello World!"
print pi;        // Tulostaa "3.14"
print nil_value; // Tulostaa "nil"

pi / string      // Ei sallittu



fn addPair(a, b) 
{
  return a + b;
}

fn identity(a) 
{
  return a;
}

print identity(addPair)(1, 2); // Tulostaa "3".




class Base 
{

 init(foo, bar) 
  {
    this.foo = foo;
    this.bar = bar;
  }

    //..
}


class Derived < Base 
{
    init(foo, bar, baz)
    {
        super.init(foo, bar);
        this.baz = baz;
    }

    qux() 
    {
        print baz + foo + bar;
    } 

    // ..
}


var derived = Derived("foo", "bar", "baz"); 
derived.qux();
